//
// Created by saisai on 2018/6/26 0026.
//

#include <malloc.h>
#include <android/log.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <linux/in.h>
#include <endian.h>
#include <arpa/inet.h>
#include "pushstream.h"
#include "ssl/include/openssl/sha.h"
#include "mpegts/mpeg-ts.h"
#include "r2tp/include/r2tp.h"

#define LOGE(format, ...)  __android_log_print(ANDROID_LOG_ERROR, "(>_<)", format, ##__VA_ARGS__)
#define LOGI(format, ...)  __android_log_print(ANDROID_LOG_INFO,  "(^_^)", format, ##__VA_ARGS__)


#define TYPE    "VideoConference"
#define SN        "VideoConference"
#define SALT    "3450b54a052210ddd7c482b1c0583de9"
#define TS_PACKET_SIZE 1316

pthread_mutex_t mpegWriteLock;
unsigned char *tsBuf;
int ind = -1;
mpeg_ts_enc_context_t *ts_enc_context = NULL;
R2tpPushSession_t *r2tpConnectPush;
//第一个数据帧不是视频帧则丢掉
int first = -1;

int fd;
struct sockaddr_in addr;
int send_state;



void *mpegalloc(void *param, size_t bytes) {

//    if (send_state == STATE_R2TPSEND) {
//        if (NULL == r2tpConnectPush) {
//            return NULL;
//        }
//        if (!r2tpConnectPush->isSending) {
//            return NULL;
//        }
//    }else
    if(send_state==STATE_STOP){
        return NULL;
    }
    uint8_t * packet = (uint8_t *) malloc(bytes);
    return packet;
}

void mpegfree(void *param, void *packet) {

//    free(param);
    if(packet!=NULL){
        free(packet);
    }
}

void mpegwrite(void *param, const void *packet, size_t bytes) {

//    LOGE("write 1");
    pthread_mutex_lock(&mpegWriteLock);

//    if (send_state == STATE_R2TPSEND) {
//        if (NULL == r2tpConnectPush) {
////            LOGE("write 3");
//            pthread_mutex_unlock(&mpegWriteLock);
//            return;
//        }
//        if (!r2tpConnectPush->isSending) {
////            LOGE("write 3");
//            pthread_mutex_unlock(&mpegWriteLock);
//            return;
//        }
//    }else
    if(send_state==STATE_STOP){
//        LOGE("write 3");
        pthread_mutex_unlock(&mpegWriteLock);
        return;
    }
//    LOGE("write 2");
    memcpy(tsBuf + ind, packet, bytes);
    ind += bytes;
    if (ind >= TS_PACKET_SIZE) {
        ind = 0;
//        switch (send_state) {
//            case STATE_UDPSEND: {
//                ssize_t ret = sendto(fd, tsBuf, 1316, 0, (struct sockaddr_in *) &addr,
//                                     sizeof(addr));
//                break;
//            }
//            case STATE_R2TPSEND: {
//                pthread_mutex_lock(&r2tpConnectPush->_mutex);
//                if(NULL != r2tpConnectPush->pR2tpHandle){
//                    int ret = r2tp_send(r2tpConnectPush->pR2tpHandle, tsBuf, TS_PACKET_SIZE, 0);
//                    if (ret != 1316 && NULL != r2tpConnectPush->eventHandler) {
//                        r2tpConnectPush->eventHandler(NULL, STATE_SEND_ERROR, ret, NULL);
//                    }
//                }
//                pthread_mutex_unlock(&r2tpConnectPush->_mutex);
//                break;
//            }
//        }
        LOGE("send=================");

        memset(tsBuf, 0, TS_PACKET_SIZE);
    }
//    LOGE("write 3");
    pthread_mutex_unlock(&mpegWriteLock);
//    LOGE("ind = %d",ind);
}


int Open(int state, const char *ip, int port) {

    send_state = state;

    if (state == STATE_R2TPSEND) {
        r2tpConnectPush = (R2tpPushSession_t *) malloc(sizeof(R2tpPushSession_t));
        if (NULL == r2tpConnectPush) {

            LOGE("Open:malloc R2tpPushSession_t error");
            return SESSION_ERROR;
        }
        r2tpConnectPush->pR2tpHandle = r2tp_open(0);
        if (NULL == r2tpConnectPush->pR2tpHandle) {
            free(r2tpConnectPush);
            r2tpConnectPush = NULL;
            LOGE("Open:r2tp_open error");
            return OPEN_ERROR;
        }
        pthread_mutex_init(&r2tpConnectPush->_mutex, NULL);
    } else {

        fd = socket(AF_INET, SOCK_DGRAM, 0);
        memset(&addr, 0, sizeof(addr));
        addr.sin_family = AF_INET;
        addr.sin_port = htons(port);
        inet_pton(AF_INET, ip, &addr.sin_addr.s_addr);
    }


    struct mpeg_ts_func_t h;
    h.alloc = mpegalloc;
    h.free = mpegfree;
    h.write = mpegwrite;

    void *param;

    ts_enc_context = mpeg_ts_create(&h, param);
    if (ts_enc_context == NULL) {
        LOGE("Open:ts_enc_context == NULL");
        return -1;
    }

    //设置 处理的音频和视频格式
    ts_enc_context->pat.pmts[0].stream_count = 2; // H.264 + AAC
    ts_enc_context->pat.pmts[0].streams[0].pid = 0x101;
    ts_enc_context->pat.pmts[0].streams[0].sid = PES_SID_AUDIO;
    ts_enc_context->pat.pmts[0].streams[0].codecid = PSI_STREAM_AAC;
    ts_enc_context->pat.pmts[0].streams[1].pid = 0x102;
    ts_enc_context->pat.pmts[0].streams[1].sid = PES_SID_VIDEO;
    ts_enc_context->pat.pmts[0].streams[1].codecid = PSI_STREAM_H264;

//    pthread_mutex_init(&mpegWriteLock, NULL);
    if(NULL!=tsBuf){
        free(tsBuf);
        tsBuf=NULL;
    }
    tsBuf = malloc(sizeof(char) * TS_PACKET_SIZE);

    return 0;
}

int Connect(const char *serverHost, int port, const char *key) {

    if (NULL == r2tpConnectPush) {
        LOGE("Connect:session == NULL");
        return SESSION_ERROR;
    }

    if (NULL == serverHost || NULL == key) {
        LOGE("Connect:NULL == serverHost || NULL == key");
        return -1;
    }

    memset(r2tpConnectPush->serverHost, 0, sizeof(r2tpConnectPush->serverHost));
    strncpy(r2tpConnectPush->serverHost, serverHost, sizeof(r2tpConnectPush->serverHost));
    r2tpConnectPush->serverHost[sizeof(r2tpConnectPush->serverHost) - 1] = '\0';
    r2tpConnectPush->port = port;
    memset(r2tpConnectPush->key, 0, sizeof(r2tpConnectPush->key));
    strncpy(r2tpConnectPush->key, key, sizeof(r2tpConnectPush->key));
    r2tpConnectPush->key[sizeof(r2tpConnectPush->key) - 1] = '\0';
    r2tpConnectPush->isSending = 0;
    pthread_mutex_init(&r2tpConnectPush->_mutex, NULL);
    r2tpConnectPush->eventHandler = NULL;
    r2tpConnectPush->eventUserdata = NULL;


    /*auth*/
    char tmp[128];
    char mdString[SHA_DIGEST_LENGTH * 2 + 1] = {0};
    sprintf(tmp, "%s:%s:%s:%s", TYPE, SN, key, SALT);
    SHA_CTX ctx;
    int ret = SHA1_Init(&ctx);
    ret = SHA1_Update(&ctx, tmp, strlen(tmp));
    unsigned char digest[128] = {0};
    ret = SHA1_Final(digest, &ctx);
    int i = 0;
    for (; i < SHA_DIGEST_LENGTH; i++) {
        sprintf(&mdString[i * 2], "%02x", (unsigned int) digest[i]);
    }
    Authorization_t auth = {0};
    sprintf((char *) auth.data, "%s:%s:%s:%s", "1", TYPE, SN, mdString);
    auth.length = (int) strlen((const char *) auth.data);
    if (r2tp_setopt(r2tpConnectPush->pR2tpHandle, RO_AUTHORIZATION, &auth, sizeof(auth)) !=0) {
        LOGE("Connect:r2tp_setopt error");
        return SETOPT_ERROR;
    }

    /*connect server*/
    R2tpAddr_t serverAddr = {0};
    serverAddr.ip_version = R2TP_IPV4;
    sprintf(serverAddr.ip, "%s", serverHost);
    serverAddr.port = port;


    int result=-1;
    if ((result=r2tpv3_connect(r2tpConnectPush->pR2tpHandle, &serverAddr, 1, 1000 * 1000)) !=0) {
        LOGE("Connect:r2tp_connect error");
        return result;
    }

    r2tpConnectPush->isSending = 1;

    return 0;
}

int SetCallback(R2TPCONNECT_EventHandler eventHandler){

    if (NULL == r2tpConnectPush) {
        LOGE("SetCallback:session == NULL");
        return SESSION_ERROR;
    }

    r2tpConnectPush->eventHandler=eventHandler;
    return 0;
}

int PutFrame(int type, int flag, long pts, long dts, const char *data, size_t bytes) {

//    if (send_state == STATE_R2TPSEND) {
//        if (NULL == r2tpConnectPush) {
//            LOGE("PutFrame:r2tpConnectPush==NULL");
//            return SESSION_ERROR;
//        }
//
//        pthread_mutex_lock(&r2tpConnectPush->_mutex);
//        if (!r2tpConnectPush->isSending) {
//            LOGE("PutFrame:no sending");
//            return -1;
//        }
//        pthread_mutex_unlock(&r2tpConnectPush->_mutex);
//    }else
    if (send_state == STATE_STOP) {
        LOGE("PutFrame:send_state==STATE_STOP");
        return -1;
    }

    if (ts_enc_context == NULL) {
        LOGE("PutFrame:ts==NULL");
        return -1;
    }
    uint16_t stream_type;
    if (type == 0) {//0表示 video
        first = 1;
        stream_type = 0x102;
    } else {
        if (first < 0) {
            LOGE("第一帧不是视频帧，丢弃==========");
            return 0;
        }
        stream_type = 0x101;
    }

    mpeg_ts_write(ts_enc_context, stream_type, flag, pts, dts, (void *) data, bytes);
    free(data);
    data = NULL;
    return 0;
}

int ParseData(float* dropRate,int* bitrate,int* jitter,int* rtt,int* maxDelay) {
    if(send_state==STATE_STOP){
        LOGE("PutFrame:send_state==STATE_STOP");
        return -1;
    }
    if (NULL == r2tpConnectPush) {
        LOGE( "ParseData:session == null");
        return SESSION_ERROR;
    }

    if(!r2tpConnectPush->isSending){
        LOGE( "ParseData:push stream stop");
        return -1;
    }

    R2tpStat_t st;

    memset(&st, 0, sizeof(st));
    pthread_mutex_lock(&r2tpConnectPush->_mutex);
    if (r2tp_getopt(r2tpConnectPush->pR2tpHandle, RO_STAT, &st, sizeof(st)) == -1) {
        LOGE( "ParsePullStreamData:r2tp_getopt error");
        pthread_mutex_unlock(&r2tpConnectPush->_mutex);
        return GETOPT_ERROR;
    }
    pthread_mutex_unlock(&r2tpConnectPush->_mutex);
//    float dropRate = 0;
//    int bitrate = 0;
//    int jitter = 0;
//    int rtt = 0;
//    int maxDelay = 0;

    uint32_t totalLoss = st.sendStat.totalLoss;
    int64_t totalReceived = st.sendStat.totalReceived;
    if (totalLoss > 0 && totalReceived > 0) {
        *dropRate = (float) (totalLoss * 100) * 1.0f / (totalLoss + totalReceived);
    }

    *bitrate = st.sendStat.bitrate * 8;
    *jitter = st.sendStat.jitter;
    *rtt = st.sendStat.rtt;
    *maxDelay = st.sendStat.maxDelay;

    if (*dropRate < 0 || *dropRate > 100)
        *dropRate = 0;
    if (*bitrate < 0)
        *bitrate = 0;
    if (*jitter < 0)
        *jitter = 0;
    if (*rtt < 0)
        *rtt = 0;
    if (*maxDelay < 0)
        *maxDelay = 0;

    return 0;
}

//pthread_mutex_t lock;

int Disconnect() {

    send_state=STATE_STOP;
    usleep(200*1000);
    LOGE("Disconnect 1");
    pthread_mutex_lock(&mpegWriteLock);
    if (NULL == r2tpConnectPush) {
        pthread_mutex_unlock(&mpegWriteLock);
        LOGE("NULL == r2tpConnectPush");
        return 0;
    }
    LOGE("Disconnect 2");



    pthread_mutex_lock(&r2tpConnectPush->_mutex);
    if (r2tpConnectPush->isSending)
    {
        r2tpConnectPush->isSending = 0;
    }
    LOGE("Disconnect 3");

//    r2tp_close(r2tpConnectPush->pR2tpHandle);

//    pthread_mutex_destroy(&r2tpConnectPush->_mutex);
    pthread_mutex_unlock(&r2tpConnectPush->_mutex);
    LOGE("Disconnect 4");

//    free(r2tpConnectPush->serverHost);
//    free(r2tpConnectPush->key);
//    free(r2tpConnectPush->eventUserdata);
//    free(r2tpConnectPush->pR2tpHandle);

    free(r2tpConnectPush);

    r2tpConnectPush = NULL;

//    usleep(200*1000);
//
//    free(ts_enc_context->payload);
//    free(&ts_enc_context->pat);
//    free(ts_enc_context);

//    ts_enc_context = NULL;
//
//    free(tsBuf);
//    tsBuf = NULL;
//    free(&mpegWriteLock);
//    mpeg_ts_destroy(ts_enc_context);

    pthread_mutex_unlock(&mpegWriteLock);
    LOGE("Disconnect 5");

    return 0;
}

void GetR2tpVersion(int *major,int *minor,int *revision){

    r2tp_get_version(major,minor,revision);
}



